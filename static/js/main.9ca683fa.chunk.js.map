{"version":3,"sources":["resources/sky.hdr","components/upload_button.jsx","scenes/splash_screen.jsx","components/cropper/Canvas.js","components/cropper/utils.js","components/cropper/CropPoint.js","components/cropper/CropPoints.js","components/cropper/imgManipulation.js","components/cropper/CropPointsDelimiters.js","components/cropper/Cropper.js","scenes/perspective_fixer.jsx","components/slider_wrapper.jsx","components/shapes/mesh.jsx","components/norm_map_generator.jsx","components/download_button.jsx","scenes/main_screen.jsx","components/App.jsx","reportWebVitals.js","index.js"],"names":["module","exports","UploadButton","props","className","id","style","color","type","accept","onChange","changeFunc","SplashScreen","imageResizeRatio","activeScene","event","image","target","files","baseImage","src","URL","createObjectURL","onSetBaseImage","onload","onSceneChange","readFile","file","File","Promise","resolve","reject","reader","FileReader","result","onerror","err","readAsDataURL","buildCropPointStyle","size","pointBgColor","pointBorder","width","height","backgroundColor","border","borderRadius","position","zIndex","CropPoint","cropPoints","pointArea","defaultPosition","pointSize","externalOnStop","onStop","externalOnDrag","onDrag","bounds","useCallback","_","x","y","nodeRef","useRef","ref","CropPoints","previewDims","otherProps","transform","cv","docCanvas","setPreviewPaneDimensions","dst","imread","bR","bL","tR","tL","sourceCoordinates","map","point","maxWidth","Math","max","maxHeight","destCoordinates","Ms","matFromArray","CV_32FC2","concat","Md","transformMatrix","getPerspectiveTransform","dsize","Size","warpPerspective","INTER_LINEAR","BORDER_CONSTANT","Scalar","imshow","delete","CropPointsDelimiters","lineWidth","lineColor","canvas","clearCanvas","current","getContext","clearRect","sortPoints","reduce","acc","pointPos","drawShape","point1","point2","point3","point4","ctx","strokeStyle","beginPath","moveTo","lineTo","closePath","stroke","useEffect","sortedPoints","buildImgContainerStyle","imageDimensions","Canvas","onDragStop","cropperRef","useOpenCv","cvLoaded","loaded","canvasRef","previewCanvasRef","magnifierCanvasRef","useState","setPreviewDims","setCropPoints","loading","setLoading","mode","setMode","useImperativeHandle","backToCrop","done","a","opts","preview","toBlob","blob","name","showPreview","newPreviewDims","externalMaxWidth","externalMaxHeight","ratio","window","innerWidth","innerHeight","calculated","round","calcDims","createCanvas","img","document","createElement","drawImage","Mat","resize","INTER_AREA","detectContours","ksize","cvtColor","COLOR_RGBA2GRAY","GaussianBlur","BORDER_DEFAULT","Canny","threshold","THRESH_BINARY","contours","MatVector","hierarchy","findContours","RETR_CCOMP","CHAIN_APPROX_SIMPLE","rect","boundingRect","Object","keys","forEach","key","contourCoordinates","clearMagnifier","bootstrap","area","magnCtx","cPs","left","offsetLeft","top","offsetTop","right","offsetWidth","bottom","offsetHeight","pointerEvents","Cropper","React","forwardRef","openCvPath","PerspectiveFixer","setCropState","isCropped","setIsCropped","s","setBaseImage","doSomething","res","console","log","getElementById","toDataURL","onClick","onGoBack","SliderWrapper","name_value","min","min_value","max_value","step","step_value","defaultValue","default_value","funcforthis","Mesh","normalMap","useLoader","TextureLoader","wrapS","THREE","wrapT","model","OBJLoader","geometry","useMemo","g","traverse","c","modelType","repeat","set","rotation","attach","args","roughness","baseImgMat","srcImgMat","sobelxData","sobelyData","canvasData","imgSize","orgSize","dZ","globalBlurAmnt","Image","RegCanvas","HDCanvas","isRenderHighRes","intensity","setIntensity","detail","setDetail","blurAmount","setBlurAmount","firstRender","setRendered","undefined","setModel","setModelType","GenerateNormalMap","rescaleFactor","getBestSize","sobelxCVMat","sobelyCVMat","COLOR_RGB2GRAY","anchor","Point","blur","Sobel","getImageData","data","slice","updateNormalMap","dX","dY","length","i","sqrt","putImageData","blurUpdate","filter","pow","value","onIntensityChange","onLevelChange","url","OrbitControls","enableZoom","fallback","Environment","background","HdrFile","DownloadButton","renderHighRes","href","download","click","MainScreen","generatorRef","setIsImageLoaded","setImageLoaded","Main","goBack","handleSceneChange","Fragment","App","setactiveScene","setImage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","container","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.9ca683fa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sky.b9c29f6e.hdr\";","import React from 'react';\n\nimport '../css/button.css';\n\nconst UploadButton = (props) => {\n\n  return (\n    <label className=\"waves-effect waves-light btn-large\" id=\"button-container\">\n      <input style={{ color: props.color }} id=\"button-display\" type=\"file\" accept=\"image/*\" onChange={props.changeFunc} />\n      Upload Texture\n    </label>\n  )\n};\n\nexport default UploadButton","import React from 'react';\n\nimport '../css/splash_screen.css';\nimport UploadButton from '../components/upload_button';\n\n//NOTE::Element id/class naming conventions to make our lives easier when writing css.\n//Use all lower case and seperate words with a dash. Example: id=\"upload-button\"\n\nfunction SplashScreen(props) {\n\n  function handleSceneChange() {\n    props.onSceneChange();\n  }\n\n  function setBaseImage(image) {\n    props.onSetBaseImage(image);\n  }\n\n  function show() {\n    return props.activeScene === \"SplashScreen\";\n  }\n\n  function onImageSelect(event){\n    \n    //Converts the loaded \"thing\" into an img.\n    if (event.target.files && event.target.files[0]) {\n      props.baseImage.src = URL.createObjectURL(event.target.files[0]);\n      setBaseImage(props.baseImage);\n    }\n\n    //onload is used to make sure that the img is fully loaded before any processing.\n    props.baseImage.onload = function () {\n      handleSceneChange();\n    }\n  }\n\n \n  if (show()) {\n    return (\n      <div className=\"main-container\">\n        <h2 id=\"splash-title\">Normal Map Generator</h2>\n        <p id=\"splash-text\">To begin, upload a texture</p>\n        \n        \n        <div>\n          <UploadButton changeFunc={onImageSelect}></UploadButton>\n        </div>\n      </div>\n    );\n  } else {\n    return null;\n  }\n  \n}\n\nexport default SplashScreen;","// Copyright (c) 2020 © Giacomo Cerquone\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), \n// to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, \n// and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. \n// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, \n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, \n// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\nimport React, {\n  useCallback,\n  useEffect,\n  useImperativeHandle,\n  useRef,\n  useState,\n  Fragment\n} from 'react'\n\n\nimport { useOpenCv } from 'opencv-react'\nimport T from 'prop-types'\n\nimport { calcDims, readFile } from './utils'\nimport CropPoints from './CropPoints'\nimport { applyFilter, transform } from './imgManipulation'\nimport CropPointsDelimiters from './CropPointsDelimiters'\n\nconst buildImgContainerStyle = (previewDims) => ({\n  width: previewDims.width,\n  height: previewDims.height\n})\n\nconst imageDimensions = { width: 0, height: 0 }\nlet imageResizeRatio\n\nconst Canvas = ({\n  image,\n  onDragStop,\n  onChange,\n  cropperRef,\n  pointSize = 30,\n  lineWidth,\n  pointBgColor,\n  pointBorder,\n  lineColor,\n  maxWidth,\n  maxHeight\n}) => {\n  const { loaded: cvLoaded, cv } = useOpenCv()\n  const canvasRef = useRef()\n  const previewCanvasRef = useRef()\n  const magnifierCanvasRef = useRef()\n  const [previewDims, setPreviewDims] = useState()\n  const [cropPoints, setCropPoints] = useState()\n  const [loading, setLoading] = useState(false)\n  const [mode, setMode] = useState('crop')\n\n  useImperativeHandle(cropperRef, () => ({\n    backToCrop: () => {\n      setMode('crop')\n    },\n    done: async (opts = {}) => {\n      return new Promise((resolve) => {\n        setLoading(true)\n        transform(\n          cv,\n          canvasRef.current,\n          cropPoints,\n          imageResizeRatio,\n          setPreviewPaneDimensions\n        )\n        // applyFilter(cv, canvasRef.current, opts.filterCvParams)\n        if (opts.preview) {\n          setMode('preview')\n        }\n        canvasRef.current.toBlob((blob) => {\n          blob.name = image.name\n          resolve(blob)\n          setLoading(false)\n        }, image.type)\n      })\n    }\n  }))\n\n  useEffect(() => {\n    if (mode === 'preview') {\n      showPreview()\n    }\n  }, [mode])\n\n  const setPreviewPaneDimensions = () => {\n    // set preview pane dimensions\n    const newPreviewDims = calcDims(\n      canvasRef.current.width,\n      canvasRef.current.height,\n      maxWidth,\n      maxHeight\n    )\n    setPreviewDims(newPreviewDims)\n\n    previewCanvasRef.current.width = newPreviewDims.width\n    previewCanvasRef.current.height = newPreviewDims.height\n\n    imageResizeRatio = newPreviewDims.width / canvasRef.current.width\n  }\n\n  const createCanvas = (src) => {\n    return new Promise((resolve, reject) => {\n      const img = document.createElement('img')\n      img.onload = async () => {\n        // set edited image canvas and dimensions\n        canvasRef.current = document.createElement('canvas')\n        canvasRef.current.width = img.width\n        canvasRef.current.height = img.height\n        const ctx = canvasRef.current.getContext('2d')\n        ctx.drawImage(img, 0, 0)\n        imageDimensions.width = canvasRef.current.width\n        imageDimensions.height = canvasRef.current.height\n        setPreviewPaneDimensions()\n        resolve()\n      }\n      img.src = src\n    })\n  }\n\n  const showPreview = (image) => {\n    const src = image || cv.imread(canvasRef.current)\n    const dst = new cv.Mat()\n    const dsize = new cv.Size(0, 0)\n    cv.resize(\n      src,\n      dst,\n      dsize,\n      imageResizeRatio,\n      imageResizeRatio,\n      cv.INTER_AREA\n    )\n    cv.imshow(previewCanvasRef.current, dst)\n    src.delete()\n    dst.delete()\n  }\n\n  const detectContours = () => {\n    const dst = cv.imread(canvasRef.current)\n    const ksize = new cv.Size(5, 5)\n    // convert the image to grayscale, blur it, and find edges in the image\n    cv.cvtColor(dst, dst, cv.COLOR_RGBA2GRAY, 0)\n    cv.GaussianBlur(dst, dst, ksize, 0, 0, cv.BORDER_DEFAULT)\n    cv.Canny(dst, dst, 75, 200)\n    // find contours\n    cv.threshold(dst, dst, 120, 200, cv.THRESH_BINARY)\n    const contours = new cv.MatVector()\n    const hierarchy = new cv.Mat()\n    cv.findContours(\n      dst,\n      contours,\n      hierarchy,\n      cv.RETR_CCOMP,\n      cv.CHAIN_APPROX_SIMPLE\n    )\n    const rect = cv.boundingRect(dst)\n    dst.delete()\n    hierarchy.delete()\n    contours.delete()\n    // transform the rectangle into a set of points\n    Object.keys(rect).forEach((key) => {\n      rect[key] = rect[key] * imageResizeRatio\n    })\n\n    const contourCoordinates = {\n      'left-top': { x: rect.x, y: rect.y },\n      'right-top': { x: rect.x + rect.width, y: rect.y },\n      'right-bottom': {\n        x: rect.x + rect.width,\n        y: rect.y + rect.height\n      },\n      'left-bottom': { x: rect.x, y: rect.y + rect.height }\n    }\n\n    setCropPoints(contourCoordinates)\n  }\n\n  const clearMagnifier = () => {\n    const magnCtx = magnifierCanvasRef.current.getContext('2d')\n    magnCtx.clearRect(\n      0,\n      0,\n      magnifierCanvasRef.current.width,\n      magnifierCanvasRef.current.height\n    )\n  }\n\n  useEffect(() => {\n    if (onChange) {\n      onChange({ ...cropPoints, loading })\n    }\n  }, [cropPoints, loading])\n\n  useEffect(() => {\n    const bootstrap = async () => {\n      const src = await readFile(image)\n      await createCanvas(src)\n      showPreview()\n      detectContours()\n      setLoading(false)\n    }\n\n    if (image && previewCanvasRef.current && cvLoaded && mode === 'crop') {\n      bootstrap()\n    } else {\n      setLoading(true)\n    }\n  }, [image, previewCanvasRef.current, cvLoaded, mode])\n\n  const onDrag = useCallback((position, area) => {\n    const { x, y } = position\n\n    const magnCtx = magnifierCanvasRef.current.getContext('2d')\n    clearMagnifier()\n\n    // TODO we should make those 5, 10 and 20 values proportionate\n    // to the point size\n    magnCtx.drawImage(\n      previewCanvasRef.current,\n      x - (pointSize - 10),\n      y - (pointSize - 10),\n      pointSize + 5,\n      pointSize + 5,\n      x + 10,\n      y - 90,\n      pointSize + 20,\n      pointSize + 20\n    )\n\n    setCropPoints((cPs) => ({ ...cPs, [area]: { x, y } }))\n  }, [])\n\n  const onStop = useCallback((position, area, cropPoints) => {\n    const { x, y } = position\n    clearMagnifier()\n    setCropPoints((cPs) => ({ ...cPs, [area]: { x, y } }))\n    if (onDragStop) {\n      onDragStop({ ...cropPoints, [area]: { x, y } })\n    }\n  }, [])\n\n  return (\n    <div\n      style={{\n        position: 'relative',\n        ...(previewDims && buildImgContainerStyle(previewDims))\n      }}\n    >\n      {previewDims && mode === 'crop' && cropPoints && (\n        <Fragment>\n          <CropPoints\n            pointSize={pointSize}\n            pointBgColor={pointBgColor}\n            pointBorder={pointBorder}\n            cropPoints={cropPoints}\n            previewDims={previewDims}\n            onDrag={onDrag}\n            onStop={onStop}\n            bounds={{\n              left: previewCanvasRef?.current?.offsetLeft - pointSize / 2,\n              top: previewCanvasRef?.current?.offsetTop - pointSize / 2,\n              right:\n                previewCanvasRef?.current?.offsetLeft -\n                pointSize / 2 +\n                previewCanvasRef?.current?.offsetWidth,\n              bottom:\n                previewCanvasRef?.current?.offsetTop -\n                pointSize / 2 +\n                previewCanvasRef?.current?.offsetHeight\n            }}\n          />\n          <CropPointsDelimiters\n            previewDims={previewDims}\n            cropPoints={cropPoints}\n            lineWidth={lineWidth}\n            lineColor={lineColor}\n            pointSize={pointSize}\n          />\n          <canvas\n            style={{\n              position: 'absolute',\n              zIndex: 5,\n              pointerEvents: 'none'\n            }}\n            width={previewDims.width}\n            height={previewDims.height}\n            ref={magnifierCanvasRef}\n          />\n        </Fragment>\n      )}\n\n      <canvas id=\"perspective-fixer\"\n        style={{ zIndex: 5, pointerEvents: 'none' }}\n        ref={previewCanvasRef}\n      />\n    </div>\n  )\n}\n\nexport default Canvas\n\nCanvas.propTypes = {\n  // image: T.object.isRequired,\n  onDragStop: T.func,\n  onChange: T.func,\n  cropperRef: T.shape({\n    current: T.shape({\n      done: T.func.isRequired,\n      backToCrop: T.func.isRequired\n    })\n  }),\n  pointSize: T.number,\n  lineWidth: T.number,\n  pointBgColor: T.string,\n  pointBorder: T.string,\n  lineColor: T.string\n}\n","// Copyright (c) 2020 © Giacomo Cerquone\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), \n// to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, \n// and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. \n// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, \n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, \n// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\nexport const readFile = (file) => {\n  if (file instanceof File) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader()\n      reader.onload = (event) => {\n        resolve(reader.result)\n      }\n      reader.onerror = (err) => {\n        reject(err)\n      }\n      reader.readAsDataURL(file)\n    })\n  }\n  if (typeof file === 'string') {\n    return Promise.resolve(file)\n  }\n}\n\nexport const calcDims = (\n  width,\n  height,\n  externalMaxWidth,\n  externalMaxHeight\n) => {\n  const ratio = width / height\n\n  const maxWidth = externalMaxWidth || window.innerWidth\n  const maxHeight = externalMaxHeight || window.innerHeight\n  const calculated = {\n    width: maxWidth,\n    height: Math.round(maxWidth / ratio),\n    ratio: ratio\n  }\n\n  if (calculated.height > maxHeight) {\n    calculated.height = maxHeight\n    calculated.width = Math.round(maxHeight * ratio)\n  }\n  return calculated\n}\n","// Copyright (c) 2020 © Giacomo Cerquone\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), \n// to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, \n// and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. \n// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, \n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, \n// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nimport React, { useCallback, useRef } from 'react'\nimport Draggable from 'react-draggable'\nimport T from 'prop-types'\n\nconst buildCropPointStyle = (size, pointBgColor, pointBorder) => ({\n  width: size,\n  height: size,\n  backgroundColor: pointBgColor,\n  border: pointBorder,\n  borderRadius: '100%',\n  position: 'absolute',\n  zIndex: 1001\n})\n\nconst CropPoint = ({\n  cropPoints,\n  pointArea,\n  defaultPosition,\n  pointSize,\n  pointBgColor = 'transparent',\n  pointBorder = '4px solid #3cabe2',\n  onStop: externalOnStop,\n  onDrag: externalOnDrag,\n  bounds\n}) => {\n  const onDrag = useCallback(\n    (_, position) => {\n      externalOnDrag(\n        {\n          ...position,\n          x: position.x + pointSize / 2,\n          y: position.y + pointSize / 2\n        },\n        pointArea\n      )\n    },\n    [externalOnDrag]\n  )\n\n  const onStop = useCallback(\n    (_, position) => {\n      externalOnStop(\n        {\n          ...position,\n          x: position.x + pointSize / 2,\n          y: position.y + pointSize / 2\n        },\n        pointArea,\n        cropPoints\n      )\n    },\n    [externalOnDrag, cropPoints]\n  )\n  const nodeRef = useRef(null)\n  return (\n    <Draggable\n      nodeRef = {nodeRef}\n      bounds={bounds}\n      defaultPosition={defaultPosition}\n      position={{\n        x: cropPoints[pointArea].x - pointSize / 2,\n        y: cropPoints[pointArea].y - pointSize / 2\n      }}\n      onDrag={onDrag}\n      onStop={onStop}\n    >\n      <div ref={nodeRef} style={buildCropPointStyle(pointSize, pointBgColor, pointBorder)} />\n    </Draggable>\n  )\n}\n\nexport default CropPoint\n\nCropPoint.propTypes = {\n  cropPoints: T.shape({\n    'left-top': T.shape({ x: T.number, y: T.number }).isRequired,\n    'right-top': T.shape({ x: T.number, y: T.number }).isRequired,\n    'right-bottom': T.shape({ x: T.number, y: T.number }).isRequired,\n    'left-bottom': T.shape({ x: T.number, y: T.number }).isRequired\n  }),\n  pointArea: T.oneOf(['left-top', 'right-top', 'right-bottom', 'left-bottom']),\n  defaultPosition: T.shape({\n    x: T.number,\n    y: T.number\n  }),\n  pointSize: T.number,\n  pointBgColor: T.string,\n  pointBorder: T.string,\n  onStop: T.func,\n  onDrag: T.func\n}\n","// Copyright (c) 2020 © Giacomo Cerquone\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), \n// to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, \n// and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. \n// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, \n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, \n// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\nimport React, { Fragment } from 'react'\nimport CropPoint from './CropPoint'\nimport T from 'prop-types'\n\nconst CropPoints = (props) => {\n  const { previewDims, ...otherProps } = props\n  return (\n    <>\n      <CropPoint\n        pointArea='left-top'\n        defaultPosition={{ x: 0, y: 0 }}\n        {...otherProps}\n      />\n      <CropPoint\n        pointArea='right-top'\n        defaultPosition={{ x: previewDims.width, y: 0 }}\n        {...otherProps}\n      />\n      <CropPoint\n        pointArea='right-bottom'\n        defaultPosition={{ x: 0, y: previewDims.height }}\n        {...otherProps}\n      />\n      <CropPoint\n        pointArea='left-bottom'\n        defaultPosition={{\n          x: previewDims.width,\n          y: previewDims.height\n        }}\n        {...otherProps}\n      />\n    </>\n  )\n}\n\nexport default CropPoints\n\nCropPoints.propTypes = {\n  previewDims: T.shape({\n    ratio: T.number,\n    width: T.number,\n    height: T.number\n  })\n}\n","// Copyright (c) 2020 © Giacomo Cerquone\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), \n// to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, \n// and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. \n// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, \n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, \n// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\nexport const transform = (\n  cv,\n  docCanvas,\n  cropPoints,\n  imageResizeRatio,\n  setPreviewPaneDimensions\n) => {\n  const dst = cv.imread(docCanvas)\n\n  const bR = cropPoints['right-bottom']\n  const bL = cropPoints['left-bottom']\n  const tR = cropPoints['right-top']\n  const tL = cropPoints['left-top']\n\n  // create source coordinates matrix\n  const sourceCoordinates = [tL, tR, bR, bL].map((point) => [\n    point.x / imageResizeRatio,\n    point.y / imageResizeRatio\n  ])\n\n  // get max width\n  const maxWidth = Math.max(bR.x - bL.x, tR.x - tL.x) / imageResizeRatio\n  // get max height\n  const maxHeight = Math.max(bL.y - tL.y, bR.y - tR.y) / imageResizeRatio\n\n  // create dest coordinates matrix\n  const destCoordinates = [\n    [0, 0],\n    [maxWidth - 1, 0],\n    [maxWidth - 1, maxHeight - 1],\n    [0, maxHeight - 1]\n  ]\n\n  // convert to open cv matrix objects\n  const Ms = cv.matFromArray(4, 1, cv.CV_32FC2, [].concat(...sourceCoordinates))\n  const Md = cv.matFromArray(4, 1, cv.CV_32FC2, [].concat(...destCoordinates))\n  const transformMatrix = cv.getPerspectiveTransform(Ms, Md)\n  // set new image size\n  const dsize = new cv.Size(maxWidth, maxHeight)\n  // perform warp\n  cv.warpPerspective(\n    dst,\n    dst,\n    transformMatrix,\n    dsize,\n    cv.INTER_LINEAR,\n    cv.BORDER_CONSTANT,\n    new cv.Scalar()\n  )\n  cv.imshow(docCanvas, dst)\n\n  dst.delete()\n  Ms.delete()\n  Md.delete()\n  transformMatrix.delete()\n\n  setPreviewPaneDimensions()\n}\n\nexport const applyFilter = async (cv, docCanvas, filterCvParams) => {\n  // default options\n  const options = {\n    blur: false,\n    th: true,\n    thMode: cv.ADAPTIVE_THRESH_MEAN_C,\n    thMeanCorrection: 15,\n    thBlockSize: 25,\n    thMax: 255,\n    grayScale: true,\n    ...filterCvParams\n  }\n  const dst = cv.imread(docCanvas)\n\n  if (options.grayScale) {\n    cv.cvtColor(dst, dst, cv.COLOR_RGBA2GRAY, 0)\n  }\n  if (options.blur) {\n    const ksize = new cv.Size(5, 5)\n    cv.GaussianBlur(dst, dst, ksize, 0, 0, cv.BORDER_DEFAULT)\n  }\n  if (options.th) {\n    if (options.grayScale) {\n      cv.adaptiveThreshold(\n        dst,\n        dst,\n        options.thMax,\n        options.thMode,\n        cv.THRESH_BINARY,\n        options.thBlockSize,\n        options.thMeanCorrection\n      )\n    } else {\n      dst.convertTo(dst, -1, 1, 60)\n      cv.threshold(dst, dst, 170, 255, cv.THRESH_BINARY)\n    }\n  }\n  cv.imshow(docCanvas, dst)\n}\n","// Copyright (c) 2020 © Giacomo Cerquone\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), \n// to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, \n// and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. \n// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, \n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, \n// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\nimport React, { useCallback, useEffect, useRef } from 'react'\nimport T from 'prop-types'\n\nconst CropPointsDelimiters = ({\n  cropPoints,\n  previewDims,\n  lineWidth = 3,\n  lineColor = '#3cabe2',\n  pointSize\n}) => {\n  const canvas = useRef()\n\n  const clearCanvas = useCallback(() => {\n    const ctx = canvas.current.getContext('2d')\n    ctx.clearRect(0, 0, previewDims.width, previewDims.height)\n  }, [canvas.current, previewDims])\n\n  const sortPoints = useCallback(() => {\n    const sortOrder = ['left-top', 'right-top', 'right-bottom', 'left-bottom']\n    return sortOrder.reduce(\n      (acc, pointPos) => [...acc, cropPoints[pointPos]],\n      []\n    )\n  }, [cropPoints])\n\n  const drawShape = useCallback(\n    ([point1, point2, point3, point4]) => {\n      const ctx = canvas.current.getContext('2d')\n      ctx.lineWidth = lineWidth\n      ctx.strokeStyle = lineColor\n\n      ctx.beginPath()\n      ctx.moveTo(point1.x + pointSize / 2, point1.y)\n      ctx.lineTo(point2.x - pointSize / 2, point2.y)\n\n      ctx.moveTo(point2.x, point2.y + pointSize / 2)\n      ctx.lineTo(point3.x, point3.y - pointSize / 2)\n\n      ctx.moveTo(point3.x - pointSize / 2, point3.y)\n      ctx.lineTo(point4.x + pointSize / 2, point4.y)\n\n      ctx.moveTo(point4.x, point4.y - pointSize / 2)\n      ctx.lineTo(point1.x, point1.y + pointSize / 2)\n      ctx.closePath()\n      ctx.stroke()\n    },\n    [canvas.current]\n  )\n\n  useEffect(() => {\n    if (cropPoints && canvas.current) {\n      clearCanvas()\n      const sortedPoints = sortPoints()\n      drawShape(sortedPoints)\n    }\n  }, [cropPoints, canvas.current])\n\n  return (\n    <canvas\n      ref={canvas}\n      style={{\n        position: 'absolute',\n        zIndex: 5\n      }}\n      width={previewDims.width}\n      height={previewDims.height}\n    />\n  )\n}\n\nexport default CropPointsDelimiters\n\nCropPointsDelimiters.propTypes = {\n  previewDims: T.shape({\n    ratio: T.number,\n    width: T.number,\n    height: T.number\n  }),\n  cropPoints: T.shape({\n    'left-top': T.shape({ x: T.number, y: T.number }).isRequired,\n    'right-top': T.shape({ x: T.number, y: T.number }).isRequired,\n    'right-bottom': T.shape({ x: T.number, y: T.number }).isRequired,\n    'left-bottom': T.shape({ x: T.number, y: T.number }).isRequired\n  }),\n  lineColor: T.string,\n  lineWidth: T.number,\n  pointSize: T.number\n}\n","// Copyright (c) 2020 © Giacomo Cerquone\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), \n// to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, \n// and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. \n// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, \n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, \n// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nimport React from 'react'\nimport { OpenCvProvider } from 'opencv-react'\nimport Canvas from './Canvas'\nimport T from 'prop-types'\n\n\nconst Cropper = React.forwardRef((props, ref) => {\n  if (!props.image) {\n    return null\n  }\n\n  return (\n    \n    <OpenCvProvider openCvPath={props.openCvPath}>\n      <Canvas {...props} cropperRef={ref} />\n    </OpenCvProvider>\n   \n  )\n})\n\nexport default Cropper\n\nCropper.propTypes = {\n  openCvPath: T.string\n}\n","import React, { useRef, useState, useCallback, useEffect } from 'react';\nimport Cropper from '../components/cropper/Cropper'\nimport '../css/perspective_fixer.css';\nimport '../css/App.css';\nimport '../css/button.css';\n\n\n//NOTE::Element id/class naming conventions to make our lives easier when writing css.\n//Use all lower case and seperate words with a dash. Example: id=\"upload-button\"\nfunction PerspectiveFixer (props){\n\n  const [cropState, setCropState] = useState()\n  const [getImage, setGetImage] = useState(false)\n  const cropperRef = useRef()\n  const [isCropped, setIsCropped] = useState(false);\n\n  const onDragStop = useCallback((s) => setCropState(s), [])\n  const onChange = useCallback((s) => setCropState(s), [])\n\n  function setBaseImage(image) {\n    props.onSetBaseImage(image);\n  }\n\n  const doSomething = async () => {\n    if (!isCropped) {\n      try {\n        const res = await cropperRef.current.done({ preview: true })\n        console.log(res)\n        props.baseImage.src = document.getElementById(\"perspective-fixer\").toDataURL();\n        setBaseImage(props.baseImage);\n        setIsCropped(true);\n      } catch (e) {\n        console.log('error', e)\n      }\n    }\n  }\n\n  function goBack() {\n    setIsCropped(false);\n    props.onGoBack(\"SplashScreen\");\n  }\n  \n  function handleSceneChange() {\n    setBaseImage(props.baseImage);\n    setIsCropped(false);\n    props.onSceneChange(\"MainScreen\");\n  }\n\n  function show() {\n    return props.activeScene === \"PerspectiveFixer\";\n  }\n\n  if (show()) {\n    return (\n      <div className=\"App\">\n\n          <header className=\"header\">\n\n            <div className=\"header_row\">\n\n              <div className = \"header_column left\">\n                <button className=\"waves-effect waves-light btn-large back-button\" id=\"button-container\" onClick={goBack}><i className=\"material-icons\"><span>arrow_back</span></i></button>\n              </div>\n            \n              <div className= \"header_column middle\" id=\"title\">Normal Map Generator</div>\n            \n            </div>\n          </header> \n\n          <div className=\"main_body\">\n            <div className = \"centered\">\n              <Cropper\n                ref={cropperRef}\n                image={props.baseImage.src}\n                onChange={onChange}\n                onDragStop={onDragStop}\n                maxWidth={500}\n                maxHeight={700}\n              />\n            </div>\n            \n            \n          \n          <div className=\"BtnBtm\">\n\n            <button className=\"waves-effect waves-light btn-large continue\" id=\"button-container\" onClick={doSomething}>Crop</button>\n            <button className=\"waves-effect waves-light btn-large continue\" id=\"button-container\" onClick={handleSceneChange}>Continue</button>\n          </div>  \n          </div>                  \n      </div>\n    );\n  } else {\n    return null;\n  }\n}\n\nexport default PerspectiveFixer;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst SliderWrapper = props => {\n    return (\n    <div>\n        {props.name_value}\n            <input className=\"slider-wrapper\" type=\"range\" min={props.min_value} max={props.max_value} step={props.step_value} \n                    defaultValue={props.default_value} onChange={props.funcforthis}/>\n    </div>\n    );\n};\n\nSliderWrapper.propTypes = {\n    children: PropTypes.node,\n    name_value: PropTypes.string,\n    min_value: PropTypes.number,\n    max_value: PropTypes.number,\n    step_value: PropTypes.number,\n    default_value: PropTypes.number,\n    funcForThis: PropTypes.func,\n};\n\nexport default SliderWrapper","import React from \"react\";\nimport { useMemo } from \"react\";\nimport * as THREE from 'three';\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader'\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\nimport { useLoader } from '@react-three/fiber'\nimport { TextureLoader } from \"three/src/loaders/TextureLoader\";\n\nexport default function Mesh(props) {\n\nconst normalMap = useLoader(TextureLoader, props.normalMap);\n\n    normalMap.wrapS = THREE.RepeatWrapping;\n    normalMap.wrapT = THREE.RepeatWrapping;\n    const model = useLoader(OBJLoader, props.model)\n\n    const geometry = useMemo(() => {\n        let g;\n        model.traverse((c) => {\n          if (c.type === \"Mesh\") {\n            const _c = c;\n            g = _c.geometry;\n          }\n        });\n        return g;\n      }, [model]);\n\n\n    if(props.modelType === \"box\"){\n        normalMap.repeat.set(1,1)\n        return(\n        <mesh rotation={[90, 0, 20]}>\n            <boxBufferGeometry attach=\"geometry\" args={[3, 3, 3]} />\n            <meshStandardMaterial normalMap={normalMap} color=\"#3b3b3b\" roughness=\"0.33\" />\n        </mesh>\n        );\n    }\n    else if(props.modelType === \"sphere\"){\n        normalMap.repeat.set(4,4)\n        return(\n        <mesh rotation={[90, 0, 20]}>\n            <sphereBufferGeometry attach=\"geometry\" args={[3]} />\n            <meshStandardMaterial normalMap={normalMap} color=\"#3b3b3b\" roughness=\"0.33\" />\n        </mesh>\n        )\n    }\n    else if(props.modelType === \"torus\"){\n        normalMap.repeat.set(8,8)\n        return(\n        <mesh rotation={[90, 0, 20]}>\n            <torusBufferGeometry attach=\"geometry\" args={[2, 1, 16, 40]} />\n            <meshStandardMaterial normalMap={normalMap} color=\"#3b3b3b\" roughness=\"0.33\" />\n        </mesh>\n        )\n    }\n    else{\n        normalMap.repeat.set(8,8)\n        return (\n            <mesh geometry={geometry}>\n                <meshStandardMaterial map={normalMap} normalMap={normalMap} color=\"#3b3b3b\" roughness=\"0.33\"/>\n            </mesh >\n        )\n    }\n}\n","import React, { useRef, useState, useEffect, forwardRef, useImperativeHandle } from 'react';\nimport {Canvas as ThreeCanvas} from \"@react-three/fiber\";\nimport { Suspense } from \"react\";\nimport { OrbitControls, Environment } from \"@react-three/drei\";\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader'\nimport { useLoader as meshLoader } from '@react-three/fiber'\nimport * as THREE from 'three';\nimport Box from \"../components/shapes/box\"\nimport HdrFile from \"../resources/sky.hdr\"\nimport '../css/norm_map_generator.css';\n\nimport SliderWrapper from './slider_wrapper';\nimport Mesh from './shapes/mesh';\n\nlet baseImgMat = null //Stores the unprocessed img.\nlet srcImgMat = null\nlet sobelxData = null\nlet sobelyData = null\nlet canvas = null\nlet ctx = null\nlet canvasData = null //TODO::This step may not be needed.\nlet imgSize = [0,0]\nlet orgSize = [0,0]\nlet dZ = 1\nlet globalBlurAmnt = 0;\n\nconst img = new Image()\nconst normalMap = new Image()\n\n\nfunction NrmMapGenCanvas(props, ref){\n    \n    // let Caman = window.Caman\n    let cv = window.cv //Load opencv.\n    \n    const RegCanvas = useRef() //React ref to get the canvas.\n    const HDCanvas = useRef()\n    const isRenderHighRes = useRef(false);\n\n    const [intensity, setIntensity] = useState(50/5000); //Slider State\n    const [detail, setDetail] = useState(1); //Slider State\n    const [blurAmount, setBlurAmount] = useState(0)\n    const [firstRender, setRendered] = useState(true)\n    const [model, setModel] = useState(undefined)\n    const [modelType, setModelType] = useState(\"box\")\n\n\n    /**\n     * Pretty sure there is a shorter way to write this.\n     */\n    function getBestSize(){\n        let targetSize = 1000;\n        if(img.width > img.height && img.width > targetSize){\n            // let ratio = img.width/img.height\n            let rescaleFactor = img.width / targetSize\n            imgSize[0] = img.width / rescaleFactor\n            imgSize[1] = img.height / rescaleFactor\n        }\n        else if(img.height > targetSize){\n            let rescaleFactor = img.height / targetSize\n            imgSize[0] = img.width / rescaleFactor\n            imgSize[1] = img.height / rescaleFactor\n        }\n        else{\n            let rescaleFactor = targetSize / img.width \n            imgSize[0] = img.width * rescaleFactor\n            imgSize[1] = img.height * rescaleFactor\n        }\n    }\n\n    //Generate a normal map from the image loaded on the canvas.\n    //TODO::If not fast enough, convert sobels to img data.\n    function GenerateNormalMap() {\n        if(isRenderHighRes.current){\n            canvas = HDCanvas.current\n        }\n        else{\n            canvas = RegCanvas.current\n        }\n        ctx = canvas.getContext(\"2d\")\n        baseImgMat = cv.imread(img) //base img\n        srcImgMat = baseImgMat //base img\n        orgSize[0] = img.width\n        orgSize[1] = img.height\n\n        if(isRenderHighRes.current){\n            imgSize[0] = orgSize[0]\n            imgSize[1] = orgSize[1]\n        }\n        else{\n            getBestSize()\n            let dsize = new cv.Size(imgSize[0], imgSize[1]);\n            cv.resize(srcImgMat, srcImgMat, dsize, 0, 0, cv.INTER_AREA);\n        }\n        \n\n        let sobelxCVMat = new cv.Mat();\n        let sobelyCVMat = new cv.Mat();\n\n        //Convert to grayscale.\n        cv.cvtColor(srcImgMat, srcImgMat, cv.COLOR_RGB2GRAY, 0);\n\n        //Blur image.\n        let ksize = new cv.Size(2, 2);\n        let anchor = new cv.Point(-1, -1);\n        cv.blur(srcImgMat, srcImgMat, ksize, anchor, cv.BORDER_DEFAULT);\n\n        //Compute sobel in the X direction\n        cv.Sobel(srcImgMat, sobelxCVMat, -1, 1, 0, 3, 1, 0, cv.BORDER_DEFAULT);\n        cv.imshow(canvas, sobelxCVMat) //show img on canvas so we can access it\n        canvasData = ctx.getImageData(0, 0, imgSize[0], imgSize[1]);\n        sobelxData = canvasData.data.slice();\n\n        //Compute sobel in the Y direction\n        cv.Sobel(srcImgMat, sobelyCVMat, -1, 0, 1, 3, 1, 0, cv.BORDER_DEFAULT);\n        cv.imshow(canvas, sobelyCVMat) //show img on canvas so we can access it\n        canvasData = ctx.getImageData(0, 0, imgSize[0], imgSize[1]);\n        sobelyData = canvasData.data.slice();\n\n        updateNormalMap()\n        // srcImg.delete(); sobelxCVMat.delete(); sobelyCVMat.delete();\n    }\n\n    //TODO::Clean this\n    dZ = 1.0/ intensity * (1.0 + Math.pow(2.0, detail))\n    function updateNormalMap() {\n        //Loop through the pixels and calculate the RGB colors. This is where the normal map is \"created\".\n        let dX = 0\n        let dY = 0\n        let length = 0\n\n        for (let i = 0; i < canvasData.data.length; i += 4) {\n\n            dX = sobelxData[i]\n            dY = sobelyData[i]\n\n            length = Math.sqrt(dX * dX + dY * dY + dZ * dZ)\n            dX = dX / length;\n            dY = dY / length;\n\n            canvasData.data[i] = (dX * 0.5 + 0.5) * 255.0; //red\n            canvasData.data[i + 1] = (dY * 0.5 + 0.5) * 255.0; //green\n            canvasData.data[i + 2] = (dZ * 255.0); //blue\n        }\n        ctx.putImageData(canvasData, 0, 0, 0, 0, imgSize[0], imgSize[1])\n        blurUpdate()\n        normalMap.src = canvas.toDataURL(\"image/jpeg\", 0.5);\n    }\n\n\n    //Blurs the canvas contents.\n    function blurUpdate(){\n        ctx.filter = `blur(${globalBlurAmnt}px)`;\n        ctx.putImageData(canvasData, 0, 0, 0, 0, imgSize[0], imgSize[1])\n        ctx.drawImage(canvas, 0, 0);\n    }\n\n    //Updates the normal map on slider change.\n    function onIntensityChange(event){\n        setIntensity(event.target.value);\n        updateNormalMap()\n    }\n\n    //Updates the normal map on slider change.\n    function onLevelChange(event){\n        setDetail(event.target.value * -1); \n        updateNormalMap()\n    }\n\n    function loadModel(event){\n        if (event.target.files && event.target.files[0]) {\n        const url = URL.createObjectURL(event.target.files[0]);\n        setModel(url)\n        setModelType(\"custom\");\n        }\n    }\n\n    useImperativeHandle(ref, () => ({\n        GenerateNormalMap,\n        isRenderHighRes\n    }), [])\n\n    // Makes sure to update the canvas on intensity change\n    useEffect(() => {\n        if(firstRender == true){\n            img.src = props.baseImage.src;\n            GenerateNormalMap()\n            setRendered(false);\n        }\n        updateNormalMap()\n     },[intensity, detail, blurAmount])\n\n   \n\n    //HTML elements of this component.\n    return (\n        <div id=\"canvas-container\">\n\n            <div className=\"grid_items\">\n                <div className=\"grid_item\">\n                    <canvas id=\"normal-canvas\" ref={RegCanvas} width=\"250\" height=\"250\"></canvas>\n                    <canvas id=\"highres-canvas\" ref={HDCanvas} width=\"250\" height=\"250\"></canvas>\n                </div>\n\n                <div className=\"grid_item\" id=\"slider-container\">\n                    <SliderWrapper name_value=\"Intensity\" min_value={0.00001} max_value={0.08} step_value={0.0001} default_value={0.01} funcforthis={(event) => { onIntensityChange(event) }} />\n                    <SliderWrapper name_value=\"Detail\" min_value={-10} max_value={15} step_value={0.1} default_value={1} funcforthis={(event) => { onLevelChange(event) }} />\n                    <SliderWrapper name_value=\"Blur\" min_value={0} max_value={13} step_value={0.0001} default_value={0} funcforthis={(event) => { setBlurAmount(event.target.value); globalBlurAmnt = event.target.value; blurUpdate(); }} />\n                </div>\n\n                <div className=\"grid_item\" id=\"three-container\">\n\n                    <div id=\"model-selector-container\">\n                    <div className=\"custom-loader\">\n                        <label className=\"model-picker waves-effect waves-light\" id=\"top-selector\">\n                            <input id=\"button-display\" type=\"file\" onChange={loadModel} />\n                            Load Custom Model\n                        </label>\n                    </div>\n                        <label className=\"model-picker waves-effect waves-light\"  id=\"left-selector\" onClick={() => { setModelType(\"box\") }}>Cube</label>\n                        <label className=\"model-picker waves-effect waves-light\" id=\"center-selector\" onClick={() => { setModelType(\"sphere\") }}>Sphere</label>\n                        <label className=\"model-picker waves-effect waves-light\"  id=\"right-selector\" onClick={() => { setModelType(\"torus\") }}>Torus</label>\n                    </div>\n\n\n                    <div className=\"three-canvas\">\n                        <ThreeCanvas>\n                            <OrbitControls enableZoom={true} />\n                            <pointLight position={[-20, 30, 10]} />\n                            <pointLight position={[30, -40, 50]} />\n                            <pointLight position={[20, -10, -30]} />\n                            <Suspense fallback={null}>\n                                <Mesh modelType={modelType} model={model} normalMap={normalMap.src}></Mesh>\n                                <Environment\n                                    background={true}\n                                    files={HdrFile} />\n                            </Suspense>\n                        </ThreeCanvas>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default forwardRef(NrmMapGenCanvas)\n","import React, {  } from 'react';\n\nimport '../css/button.css';\n\nexport default function DownloadButton(props) {\n\n  function download_image() {\n    \n    props.renderHighRes() //This function gets passed in as a prop. When called, it triggers a high res render.\n    var canvas = document.getElementById(\"highres-canvas\");\n    var anchor = document.createElement(\"a\");\n    anchor.href = canvas.toDataURL(\"image/png\");\n    anchor.download = \"NormalMap.png\";\n    anchor.click();\n    anchor.href = props.baseImage.src;\n    anchor.download = \"Diffuse.png\"\n    anchor.click()\n  }\n\n  return (\n    <label className=\"waves-effect waves-light btn-large\" id=\"button-container\" onClick={download_image}>\n      Download Image\n    </label>\n  )\n}","import React, { useRef, useState} from 'react';\n\nimport '../css/App.css';\nimport '../css/button.css';\nimport NrmMapGenCanvas from \"../components/norm_map_generator\";\nimport DownloadButton from '../components/download_button';\nimport UploadButton from '../components/upload_button';\n\n\n//NOTE::Element id/class naming conventions to make our lives easier when writing css.\n//Use all lower case and seperate words with a dash. Example: id=\"upload-button\"\n\nfunction MainScreen (props){\n\n  function handleSceneChange() {\n    props.onSceneChange();\n  }\n\n  function goBack() {\n    props.onGoBack(\"PerspectiveFixer\");\n  }\n\n  const generatorRef = useRef()\n  const [isImageLoaded, setIsImageLoaded] = useState(0) \n\n  //Triggers a high resolution render on the high res canvas.\n  const renderHighRes = () => {\n    generatorRef.current.isRenderHighRes.current = true;\n    generatorRef.current.GenerateNormalMap()\n    generatorRef.current.isRenderHighRes.current = false;\n    generatorRef.current.GenerateNormalMap()\n  }\n\n  function show() {\n    return props.activeScene === \"MainScreen\";\n  }\n\n  if (show()) {\n    return (\n\n      <div className=\"App\">\n\n         <header className=\"header\">\n          <div className=\"header_row\">\n\n            <div className = \"header_column left\">\n              <button className=\"waves-effect waves-light btn-large back-button\" id=\"button-container\" onClick={goBack}><i className=\"material-icons\"><span>arrow_back</span></i></button>\n            </div>\n\n\n            <div className = \"header_column middle\" id=\"title\">Normal Map Generator</div>\n          </div>\n            \n          </header>\n        \n          <div className = \"main_body\">\n          <div>\n              <NrmMapGenCanvas baseImage={props.baseImage} setImageLoaded={setIsImageLoaded} ref={generatorRef}></NrmMapGenCanvas>\n          </div>\n\n          <div className=\"BtnBtm\">\n            <DownloadButton renderHighRes={renderHighRes} baseImage={props.baseImage}></DownloadButton>\n          </div> \n\n\n          </div>\n      </div>\n    );\n  } else {\n    return null;\n  }\n}\n\nexport default MainScreen;","import React, {useState} from 'react';\n\nimport '../css/App.css';\n\nimport SplashScreen from '../scenes/splash_screen';\nimport PerspectiveFixer from '../scenes/perspective_fixer';\nimport MainScreen from '../scenes/main_screen';\n\n\nconst Main = ({ activeScene, goBack, handleSceneChange, baseImage, setBaseImage }) => (\n  <React.Fragment>\n    <SplashScreen activeScene={activeScene} onGoBack={goBack} onSceneChange={handleSceneChange} baseImage={baseImage} onSetBaseImage={setBaseImage} />\n    <PerspectiveFixer activeScene={activeScene}  onGoBack={goBack} onSceneChange={handleSceneChange} baseImage={baseImage} onSetBaseImage={setBaseImage} />\n    <MainScreen activeScene={activeScene}  onGoBack={goBack} onSceneChange={handleSceneChange} baseImage={baseImage} onSetBaseImage={setBaseImage} />\n  </React.Fragment>\n);\n\nfunction App(props) {\n\n  const [activeScene, setactiveScene] = useState(\"SplashScreen\")\n  const [image, setImage] = useState(new Image())\n\n  function handleSceneChange() {\n    let { name } = \"\";\n    if (activeScene === \"SplashScreen\") {\n      name = \"PerspectiveFixer\";\n    } else {\n      name = \"MainScreen\";\n    }\n\n    setactiveScene(name);\n  }\n\n  function goBack() {\n    let { name } = \"\";\n    if (activeScene === \"MainScreen\") {\n      name = \"PerspectiveFixer\";\n    } else {\n      name = \"SplashScreen\";\n    }\n\n    setactiveScene(name);\n  }\n\n  function setBaseImage(image) {\n    setImage(image);\n  }\n\n  return (\n    <div className=\"App\">\n      <Main activeScene={activeScene} goBack={goBack} handleSceneChange={handleSceneChange} baseImage={image} setBaseImage={setBaseImage} />\n    </div>\n  );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nconst container = document.getElementById('root');\n\nconst root = ReactDOM.createRoot(container);\n\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n\n\n"],"sourceRoot":""}